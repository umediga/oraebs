DROP PACKAGE BODY APPS.XXSS_WSH_WSHRDBDR_XMLP_PKG;

CREATE OR REPLACE PACKAGE BODY APPS.XXSS_WSH_WSHRDBDR_XMLP_PKG AS
/* $Header: WSHRDBDRB.pls 120.1 2008/02/12 13:12:03 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed FND SRWINIT.')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    BEGIN
      DECLARE
        L_REPORT_NAME VARCHAR2(240);
      BEGIN
        SELECT
          CP.USER_CONCURRENT_PROGRAM_NAME
        INTO L_REPORT_NAME
        FROM
          FND_CONCURRENT_PROGRAMS_VL CP,
          FND_CONCURRENT_REQUESTS CR
        WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
          AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
          AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
        RP_REPORT_NAME := SUBSTR(L_REPORT_NAME,1,INSTR(L_REPORT_NAME,' (XML)'));
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RP_REPORT_NAME := 'Backorder Detail Report';
      END;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS

  BEGIN
    BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in SRWEXIT')*/NULL;
        RAISE;
    END;

    BEGIN
    DECLARE
    N_REQUEST_ID NUMBER;
BEGIN
N_REQUEST_ID := FND_REQUEST.SUBMIT_REQUEST('XDO'
,'XDOBURSTREP'
,NULL
,NULL
,FALSE
,'Y'
,P_CONC_REQUEST_ID
,'N'
);
END;
END;

     RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION P_ORGANIZATION_IDVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_ORGANIZATION_IDVALIDTRIGGER;

  FUNCTION P_ITEM_FLEX_CODEVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_ITEM_FLEX_CODEVALIDTRIGGER;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    DECLARE
      CURSOR STRUCT_NUM(FLEX_CODE IN VARCHAR2) IS
        SELECT
          ID_FLEX_NUM
        FROM
          FND_ID_FLEX_STRUCTURES
        WHERE ID_FLEX_CODE = FLEX_CODE;
      STRUCT_NUMBER NUMBER;
    BEGIN
      BEGIN
        P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
        /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      EXCEPTION
        WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
          /*SRW.MESSAGE(1000
                     ,'Failed in After Form trigger')*/NULL;
          RETURN (FALSE);
      END;
      IF P_ORDER_NUM_HIGH IS NOT NULL AND P_ORDER_NUM_LOW IS NOT NULL THEN
        LP_HEADER_NUMBER := ' AND  to_number(wdd.source_header_number) between :p_order_num_low and :p_order_num_high';
      ELSIF (P_ORDER_NUM_LOW IS NOT NULL) THEN
        LP_HEADER_NUMBER := ' and to_number(wdd.source_header_number) >= :p_order_num_low';
      ELSIF (P_ORDER_NUM_HIGH IS NOT NULL) THEN
        LP_HEADER_NUMBER := ' and to_number(wdd.source_header_number) <= :p_order_num_high';
      ELSE
        LP_HEADER_NUMBER := ' ';
      END IF;
      IF P_ITEM_CATE_SET_ID IS NOT NULL THEN
        LP_ITEM_FROM := ' mtl_item_categories mic, ';
        LP_ITEM_WHERE := '  and wdd.inventory_item_id = mic.inventory_item_id
                                     		 and mic.organization_id =  wdd.organization_id
                                     		 and mic.category_set_id = :p_item_cate_set_id ';
        IF P_ITEM_CATEGORY_ID IS NOT NULL THEN
          LP_ITEM_WHERE := LP_ITEM_WHERE || ' and mic.category_id = :p_item_category_id ';
        END IF;
      ELSE
        LP_ITEM_FROM := ' ';
	LP_ITEM_WHERE := ' ';
      END IF;
      IF P_ITEM_ID IS NOT NULL THEN
        LP_ITEM_ID := ' and wdd.inventory_item_id = :p_item_id ';
      ELSE
        LP_ITEM_ID := ' ';
      END IF;
      IF P_TRANSACTION_TYPE_ID IS NOT NULL THEN
        SELECT
          NAME
        INTO RP_ORDER_TYPE_NAME
        FROM
          OE_TRXT_TYPES_NOORGS_VL
        WHERE TRANSACTION_TYPE_ID = P_TRANSACTION_TYPE_ID;
        LP_ORDER_TYPE := ' and wdd.source_header_type_id = :p_transaction_type_id ';
      ELSE
        LP_ORDER_TYPE := ' ';
      END IF;
      OPEN STRUCT_NUM(P_ITEM_FLEX_CODE);
      FETCH STRUCT_NUM
       INTO STRUCT_NUMBER;
      CLOSE STRUCT_NUM;
      LP_STRUCTURE_NUM := STRUCT_NUMBER;
      IF P_SORT_BY IS NOT NULL THEN
        BEGIN
          SELECT
            MEANING
          INTO RP_SORT_BY
          FROM
            FND_LOOKUP_VALUES_VL
          WHERE LOOKUP_TYPE = 'WSH_WSH_WSHRDBDR_XMLP_PKG_SORT_BY'
            AND LOOKUP_CODE = P_SORT_BY;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            NULL;
        END;
      END IF;
      IF P_CUSTOMER_ID IS NOT NULL THEN
        BEGIN
          SELECT
            SUBSTRB(PARTY.PARTY_NAME
                   ,1
                   ,50)
          INTO RP_CUSTOMER
          FROM
            HZ_PARTIES PARTY,
            HZ_CUST_ACCOUNTS CUST_ACCT
          WHERE CUST_ACCT.PARTY_ID = PARTY.PARTY_ID
            AND CUST_ACCT.CUST_ACCOUNT_ID = P_CUSTOMER_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            NULL;
        END;
        LP_CUSTOMER := ' and wdd.customer_id = :p_customer_id';
      ELSE
        LP_CUSTOMER := ' ';
      END IF;
      IF P_CREATED_BY_ID IS NOT NULL THEN
        BEGIN
          SELECT
            USER_NAME
          INTO RP_USER
          FROM
            FND_USER
          WHERE USER_ID = P_CREATED_BY_ID;
          LP_CREATED_BY := ' and wdd.created_by = :p_created_by_id ';
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            RP_USER := P_CREATED_BY_ID;
        END;
      ELSE
	  LP_CREATED_BY := ' ';
      END IF;
      IF P_SHIP_TO_COUNTRY_CODE IS NOT NULL THEN
        BEGIN
          SELECT
            TERRITORY_SHORT_NAME
          INTO RP_TERRITORY_CODE
          FROM
            FND_TERRITORIES_VL
          WHERE TERRITORY_CODE = P_SHIP_TO_COUNTRY_CODE;
          LP_COUNTRY_FROM := ' wsh_locations wl, ';
          LP_COUNTRY_WHERE := ' and wdd.ship_to_location_id = wl.wsh_location_id
                                				and wl.country = :p_ship_to_country_code ';

        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            RP_TERRITORY_CODE := P_SHIP_TO_COUNTRY_CODE;
        END;
      ELSE
          LP_COUNTRY_FROM := ' ';
          LP_COUNTRY_WHERE := ' ';
      END IF;
      IF P_ORGANIZATION_ID IS NOT NULL THEN
        LP_WAREHOUSE := ' and wdd.organization_id = :p_organization_id';
      ELSE
        LP_WAREHOUSE := ' ';
      END IF;
    END;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION C_SET_LBLFORMULA RETURN VARCHAR2 IS
    SCODE VARCHAR2(80);
  BEGIN
    IF P_SOURCE_SYSTEM = 'OE' THEN
      RP_ORDER_NUM_LOW := P_ORDER_NUM_LOW;
      RP_ORDER_NUM_HIGH := P_ORDER_NUM_HIGH;
    END IF;
    DECLARE
      ITEM_DISPLAY_MEANING VARCHAR2(80);
    BEGIN
      SELECT
        MEANING
      INTO ITEM_DISPLAY_MEANING
      FROM
        WSH_LOOKUPS
      WHERE LOOKUP_TYPE = 'ITEM_DISPLAY'
        AND LOOKUP_CODE = P_ITEM_DISPLAY;
      RP_FLEX_OR_DESC := ITEM_DISPLAY_MEANING;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RP_FLEX_OR_DESC := NULL;
    END;
    IF P_ITEM_CATE_SET_ID IS NOT NULL THEN
      DECLARE
        CATEGORY_SET VARCHAR2(40);
      BEGIN
        SELECT
          SUBSTR(DESCRIPTION
                ,1
                ,40)
        INTO CATEGORY_SET
        FROM
          MTL_CATEGORY_SETS
        WHERE CATEGORY_SET_ID = P_ITEM_CATE_SET_ID;
        RP_CATEGORY_SET := CATEGORY_SET;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RP_CATEGORY_SET := 'Not Set up';
      END;
    END IF;
    IF P_ITEM_CATEGORY_ID IS NOT NULL THEN
      DECLARE
        CATEGORY VARCHAR2(40);
      BEGIN
        SELECT
          SUBSTR(DESCRIPTION
                ,1
                ,40)
        INTO CATEGORY
        FROM
          MTL_CATEGORIES
        WHERE CATEGORY_ID = P_ITEM_CATEGORY_ID;
        RP_CATEGORY := CATEGORY;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RP_CATEGORY := 'Not Set up';
      END;
    END IF;
    IF P_ORGANIZATION_ID IS NOT NULL THEN
      DECLARE
        WAREHOUSE_NAME HR_ORGANIZATION_UNITS.NAME%TYPE;
      BEGIN
        SELECT
          NAME
        INTO WAREHOUSE_NAME
        FROM
          HR_ORGANIZATION_UNITS
        WHERE ORGANIZATION_ID = P_ORGANIZATION_ID;
        RP_WAREHOUSE := WAREHOUSE_NAME;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RP_WAREHOUSE := NULL;
      END;
    END IF;
    IF P_ITEM_ID IS NOT NULL THEN
      RP_ITEM := WSH_UTIL_CORE.GET_ITEM_NAME(P_ITEM_ID
                                            ,P_ORGANIZATION_ID
                                            ,P_ITEM_FLEX_CODE
                                            ,LP_STRUCTURE_NUM);
    END IF;
    BEGIN
      SELECT
        MEANING
      INTO SCODE
      FROM
        WSH_LOOKUPS
      WHERE LOOKUP_CODE = P_SOURCE_SYSTEM
        AND LOOKUP_TYPE = 'SOURCE_SYSTEM';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    RP_SOURCE_SYSTEM := SCODE;
    RETURN (1);
    RETURN NULL;
  END C_SET_LBLFORMULA;
  /*Added by Prasanna Sunkad for ticket 2751*/
  FUNCTION CF_EMAIL_ID RETURN VARCHAR2  IS
  v_mail_id varchar2(5000);
  CURSOR EC IS SELECT MEANING FROM FND_LOOKUP_VALUES_VL WHERE LOOKUP_TYPE='XXSS_BOD_MAILID' AND ENABLED_FLAG = 'Y';
  C_MAIL FND_LOOKUP_VALUES_VL.MEANING%TYPE;
  BEGIN
OPEN EC;
 LOOP
 FETCH EC INTO C_MAIL;
 EXIT WHEN EC%NOTFOUND;
 V_MAIL_ID:=RTRIM((C_MAIL||','||V_MAIL_ID),',');
 END LOOP;
 RETURN V_MAIL_ID;
 END CF_EMAIL_ID;

 FUNCTION CF_EMAIL_SERVER RETURN VARCHAR2  IS
  V_EMAIL_SERVER VARCHAR2(2000);
  BEGIN
   SELECT  PARAMETER_VALUE             --azorasmtp000
        INTO  V_EMAIL_SERVER
        FROM  fnd_svc_comp_param_vals pv
             ,fnd_svc_comp_params_b pb
       WHERE  PV.PARAMETER_ID = PB.PARAMETER_ID
         AND  PARAMETER_NAME = 'OUTBOUND_SERVER';
 RETURN V_EMAIL_SERVER;
 END CF_EMAIL_SERVER;

 FUNCTION CF_MESSAGE RETURN VARCHAR2  IS
  V_MESSAGE VARCHAR2(5000);
  BEGIN
   V_MESSAGE:='Hi,

Please find your Back Order Detial Report attached.

Thanks';
 RETURN V_MESSAGE;
 END CF_MESSAGE;
/*---------------------------------------------------------*/
  FUNCTION CF_ITEM_DISPLAYFORMULA(INVENTORY_ITEM_ID IN NUMBER
                                 ,ORGANIZATION_ID IN NUMBER
                                 ,ITEM_DESCRIPTION IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      CURSOR INVENTORY_LABEL(ID IN NUMBER,ORG_ID IN NUMBER) IS
        SELECT
          DESCRIPTION
        FROM
          MTL_SYSTEM_ITEMS_VL
        WHERE INVENTORY_ITEM_ID = ID
          AND ORGANIZATION_ID = ORG_ID;
      NAME VARCHAR2(800);
    BEGIN
      IF P_ITEM_DISPLAY = 'D' THEN
        IF INVENTORY_ITEM_ID IS NOT NULL THEN
          OPEN INVENTORY_LABEL(INVENTORY_ITEM_ID,ORGANIZATION_ID);
          FETCH INVENTORY_LABEL
           INTO NAME;
          CLOSE INVENTORY_LABEL;
        ELSE
          NAME := ITEM_DESCRIPTION;
        END IF;
      ELSIF P_ITEM_DISPLAY = 'F' THEN
        NAME := WSH_UTIL_CORE.GET_ITEM_NAME(INVENTORY_ITEM_ID
                                           ,ORGANIZATION_ID
                                           ,P_ITEM_FLEX_CODE
                                           ,LP_STRUCTURE_NUM);
      ELSE
        IF INVENTORY_ITEM_ID IS NOT NULL THEN
          OPEN INVENTORY_LABEL(INVENTORY_ITEM_ID,ORGANIZATION_ID);
          FETCH INVENTORY_LABEL
           INTO NAME;
          CLOSE INVENTORY_LABEL;
        ELSE
          NAME := ITEM_DESCRIPTION;
        END IF;
        NAME := WSH_UTIL_CORE.GET_ITEM_NAME(INVENTORY_ITEM_ID
                                           ,ORGANIZATION_ID
                                           ,P_ITEM_FLEX_CODE
                                           ,LP_STRUCTURE_NUM) || '     ' || NAME;
      END IF;
      RETURN NAME;
    END;
    RETURN NULL;
  END CF_ITEM_DISPLAYFORMULA;

  FUNCTION CF_LINE_ITEM_DISPLAYFORMULA(LINE_ITEM IN NUMBER
                                      ,ORGANIZATION_ID IN NUMBER
                                      ,ITEM_DESCRIPTION IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      CURSOR INVENTORY_LABEL(ID IN NUMBER,ORG_ID IN NUMBER) IS
        SELECT
          DESCRIPTION
        FROM
          MTL_SYSTEM_ITEMS_VL
        WHERE INVENTORY_ITEM_ID = ID
          AND ORGANIZATION_ID = ORG_ID;
      NAME VARCHAR2(800);
    BEGIN
      IF P_ITEM_DISPLAY = 'D' THEN
        IF LINE_ITEM IS NOT NULL THEN
          OPEN INVENTORY_LABEL(LINE_ITEM,ORGANIZATION_ID);
          FETCH INVENTORY_LABEL
           INTO NAME;
          CLOSE INVENTORY_LABEL;
        ELSE
          NAME := ITEM_DESCRIPTION;
        END IF;
      ELSIF P_ITEM_DISPLAY = 'F' THEN
        NAME := WSH_UTIL_CORE.GET_ITEM_NAME(LINE_ITEM
                                           ,ORGANIZATION_ID
                                           ,P_ITEM_FLEX_CODE
                                           ,LP_STRUCTURE_NUM);
      ELSE
        IF LINE_ITEM IS NOT NULL THEN
          OPEN INVENTORY_LABEL(LINE_ITEM,ORGANIZATION_ID);
          FETCH INVENTORY_LABEL
           INTO NAME;
          CLOSE INVENTORY_LABEL;
        ELSE
          NAME := ITEM_DESCRIPTION;
        END IF;
        NAME := WSH_UTIL_CORE.GET_ITEM_NAME(LINE_ITEM
                                           ,ORGANIZATION_ID
                                           ,P_ITEM_FLEX_CODE
                                           ,LP_STRUCTURE_NUM) || '     ' || NAME;
      END IF;
      RETURN NAME;
    END;
    RETURN NULL;
  END CF_LINE_ITEM_DISPLAYFORMULA;

  FUNCTION CF_LINE_SHIPPED_QTYFORMULA(SOURCE_LINE_SET_ID IN NUMBER
                                     ,SOURCE_HEADER_ID IN NUMBER
                                     ,REQUESTED_QUANTITY_UOM IN VARCHAR2
                                     ,ORDER_UOM IN VARCHAR2
                                     ,LINE_ITEM IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_SHIPPED_QTY NUMBER;
      SHIPPED_QTY_ORD_UOM NUMBER;
    BEGIN
      IF SOURCE_LINE_SET_ID IS NOT NULL THEN
        BEGIN
          SELECT
            SUM(NVL(SHIPPED_QUANTITY
                   ,0))
          INTO L_SHIPPED_QTY
          FROM
            WSH_DELIVERY_DETAILS
          WHERE SOURCE_HEADER_ID = CF_LINE_SHIPPED_QTYFORMULA.SOURCE_HEADER_ID
            AND SOURCE_LINE_SET_ID = CF_LINE_SHIPPED_QTYFORMULA.SOURCE_LINE_SET_ID
            AND RELEASED_STATUS = 'C'
            AND SOURCE_CODE = P_SOURCE_SYSTEM
          GROUP BY
            SOURCE_LINE_SET_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            SELECT
              SUM(NVL(SHIPPED_QUANTITY
                     ,0))
            INTO L_SHIPPED_QTY
            FROM
              WSH_DELIVERY_DETAILS WDD
            WHERE SOURCE_LINE_ID = CF_LINE_SHIPPED_QTYFORMULA.SOURCE_LINE_SET_ID
              AND RELEASED_STATUS = 'C'
              AND SOURCE_CODE = P_SOURCE_SYSTEM
            GROUP BY
              SOURCE_LINE_ID;
        END;
      END IF;
      SHIPPED_QTY_ORD_UOM := WSH_WV_UTILS.CONVERT_UOM(REQUESTED_QUANTITY_UOM
                                                     ,ORDER_UOM
                                                     ,L_SHIPPED_QTY
                                                     ,LINE_ITEM);
      RETURN (NVL(SHIPPED_QTY_ORD_UOM
                ,0));
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN 0;
    END;
  END CF_LINE_SHIPPED_QTYFORMULA;

    FUNCTION CF_SELLING_PRICEFORMULA(SOURCE_LINE_ID IN NUMBER) RETURN NUMBER IS
    SPRICE NUMBER;
  BEGIN
    IF P_SOURCE_SYSTEM = 'OE' THEN
      SELECT
        OL.UNIT_SELLING_PRICE
      INTO SPRICE
      FROM
        OE_ORDER_LINES_ALL OL
      WHERE OL.LINE_ID = CF_SELLING_PRICEFORMULA.SOURCE_LINE_ID;
    END IF;
    RETURN (SPRICE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_SELLING_PRICEFORMULA;

  FUNCTION CF_LINE_BO_QTYFORMULA(SOURCE_LINE_SET_ID IN NUMBER
                                ,SOURCE_HEADER_ID IN NUMBER
                                ,REQUESTED_QUANTITY_UOM IN VARCHAR2
                                ,ORDER_UOM IN VARCHAR2
                                ,LINE_ITEM IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      BO_QTY NUMBER;
      BO_QTY_ORD_UOM NUMBER;
    BEGIN
      IF SOURCE_LINE_SET_ID IS NOT NULL THEN
        BEGIN
          SELECT
            SUM(NVL(REQUESTED_QUANTITY
                   ,0))
          INTO BO_QTY
          FROM
            WSH_DELIVERY_DETAILS
          WHERE SOURCE_HEADER_ID = CF_LINE_BO_QTYFORMULA.SOURCE_HEADER_ID
            AND SOURCE_LINE_SET_ID = CF_LINE_BO_QTYFORMULA.SOURCE_LINE_SET_ID
            AND RELEASED_STATUS = 'B'
	    AND   replenishment_status IS NULL -- bug#6689448 (replenishment project)
            AND SOURCE_CODE = P_SOURCE_SYSTEM
          GROUP BY
            SOURCE_LINE_SET_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            SELECT
              SUM(NVL(REQUESTED_QUANTITY
                     ,0))
            INTO BO_QTY
            FROM
              WSH_DELIVERY_DETAILS
            WHERE SOURCE_LINE_ID = CF_LINE_BO_QTYFORMULA.SOURCE_LINE_SET_ID
              AND RELEASED_STATUS = 'B'
              AND   replenishment_status IS NULL -- bug#6689448 (replenishment project)
              AND SOURCE_CODE = P_SOURCE_SYSTEM;
        END;
      END IF;
      BO_QTY_ORD_UOM := WSH_WV_UTILS.CONVERT_UOM(REQUESTED_QUANTITY_UOM
                                                ,ORDER_UOM
                                                ,BO_QTY
                                                ,LINE_ITEM);
      RETURN (NVL(BO_QTY_ORD_UOM
                ,0));
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN 0;
    END;
  END CF_LINE_BO_QTYFORMULA;

  FUNCTION CF_LINE_ORDERED_AMTFORMULA(CF_LINE_ORDERED_QTY IN NUMBER
                                     ,CF_selling_price IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      ORD_AMT NUMBER;
    BEGIN
      ORD_AMT := TRUNC((NVL(CF_LINE_ORDERED_QTY
                          ,0) * NVL(CF_selling_price
                          ,0))
                      ,4);
      RETURN (ORD_AMT);
    END;
  END CF_LINE_ORDERED_AMTFORMULA;

  FUNCTION CF_LINE_BO_AMTFORMULA(CF_LINE_BO_QTY IN NUMBER
                                ,CF_selling_price IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      BO_AMT NUMBER;
    BEGIN
      BO_AMT := TRUNC((NVL(CF_LINE_BO_QTY
                         ,0) * NVL(CF_selling_price
                         ,0))
                     ,4);
      RETURN (BO_AMT);
    END;
  END CF_LINE_BO_AMTFORMULA;

  FUNCTION CF_LINE_ORDERED_QTYFORMULA(SOURCE_LINE_SET_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      LINE_SET_ORD_QTY NUMBER;
    BEGIN
      IF P_SOURCE_SYSTEM = 'OE' THEN
        IF SOURCE_LINE_SET_ID IS NOT NULL THEN
          BEGIN
            SELECT
              SUM(NVL(ORDERED_QUANTITY
                     ,0))
            INTO LINE_SET_ORD_QTY
            FROM
              OE_ORDER_LINES_ALL
            WHERE LINE_SET_ID = SOURCE_LINE_SET_ID
            GROUP BY
              LINE_SET_ID;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              SELECT
                SUM(NVL(ORDERED_QUANTITY
                       ,0))
              INTO LINE_SET_ORD_QTY
              FROM
                OE_ORDER_LINES_ALL
              WHERE LINE_ID = SOURCE_LINE_SET_ID;
          END;
        END IF;
        RETURN LINE_SET_ORD_QTY;
      ELSE
        RETURN NULL;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN 0;
    END;
  END CF_LINE_ORDERED_QTYFORMULA;

  FUNCTION CF_PROMISE_DATEFORMULA(SOURCE_LINE_ID IN NUMBER) RETURN DATE IS
    PDATE VARCHAR2(20);
  BEGIN
    IF P_SOURCE_SYSTEM = 'OE' THEN
      SELECT
        OL.PROMISE_DATE
      INTO PDATE
      FROM
        OE_ORDER_LINES_ALL OL
      WHERE OL.LINE_ID = SOURCE_LINE_ID;
    END IF;
    RETURN (PDATE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_PROMISE_DATEFORMULA;

  FUNCTION CF_DAYS_LATEFORMULA(CF_PROMISE_DATE IN DATE) RETURN NUMBER IS
 --   DLATE NUMBER;
  BEGIN
    DLATE := TRUNC(SYSDATE) - TRUNC(CF_PROMISE_DATE);
    RETURN (DLATE);
  END CF_DAYS_LATEFORMULA;

  FUNCTION CF_SOURCE_CODEFORMULA(SOURCE_CODE IN VARCHAR2) RETURN CHAR IS
    SCODE VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO SCODE
    FROM
      WSH_LOOKUPS
    WHERE LOOKUP_CODE = CF_SOURCE_CODEFORMULA.SOURCE_CODE
      AND LOOKUP_TYPE = 'SOURCE_SYSTEM';
    RETURN (SCODE);
  END CF_SOURCE_CODEFORMULA;

  FUNCTION CF_DISTINCT_UOMFORMULA(ORDER_NUMBER IN VARCHAR2) RETURN NUMBER IS
    UOM_COUNT NUMBER;
  BEGIN
    SELECT
      count(distinct( LINES.ORDER_QUANTITY_UOM ))
    INTO UOM_COUNT
    FROM
      OE_ORDER_LINES_ALL LINES,
      OE_ORDER_HEADERS_ALL HEAD
    WHERE LINES.HEADER_ID = HEAD.HEADER_ID
      AND HEAD.ORDER_NUMBER = CF_DISTINCT_UOMFORMULA.ORDER_NUMBER;
    IF UOM_COUNT > 1 THEN
      RETURN 0;
    ELSE
      RETURN 1;
    END IF;
  END CF_DISTINCT_UOMFORMULA;

  FUNCTION CF_SORT_ENABLEDFORMULA(CS_COUNT_DUOM IN NUMBER
                                 ,CS_SUM_DUOM IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF CS_COUNT_DUOM <> CS_SUM_DUOM THEN
      RETURN 0;
    ELSE
      RETURN 1;
    END IF;
  END CF_SORT_ENABLEDFORMULA;

  FUNCTION CF_CURR_ENABLEDFORMULA(CS_COUNT_SORT_ENABLED IN NUMBER
                                 ,CS_SUM_SORT_ENABLED IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF CS_COUNT_SORT_ENABLED <> CS_SUM_SORT_ENABLED THEN
      RETURN 0;
    ELSE
      RETURN 1;
    END IF;
  END CF_CURR_ENABLEDFORMULA;

  FUNCTION RP_REPORT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_REPORT_NAME;
  END RP_REPORT_NAME_P;

  FUNCTION RP_SUB_TITLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_SUB_TITLE;
  END RP_SUB_TITLE_P;

  FUNCTION RP_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_DATA_FOUND;
  END RP_DATA_FOUND_P;

  FUNCTION RP_ITEM_FLEX_ALL_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_ITEM_FLEX_ALL_SEG;
  END RP_ITEM_FLEX_ALL_SEG_P;

  FUNCTION RP_ITEM_FLEX_ALL_SEG_WHERE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_ITEM_FLEX_ALL_SEG_WHERE;
  END RP_ITEM_FLEX_ALL_SEG_WHERE_P;

  FUNCTION RP_ORDER_BY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_ORDER_BY;
  END RP_ORDER_BY_P;

  FUNCTION RP_FLEX_OR_DESC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_FLEX_OR_DESC;
  END RP_FLEX_OR_DESC_P;

  FUNCTION RP_ORDER_RANGE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_ORDER_RANGE;
  END RP_ORDER_RANGE_P;

  FUNCTION RP_CATEGORY_SET_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_CATEGORY_SET;
  END RP_CATEGORY_SET_P;

  FUNCTION RP_CATEGORY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_CATEGORY;
  END RP_CATEGORY_P;

  FUNCTION RP_ORDER_NUM_HIGH_P RETURN NUMBER IS
  BEGIN
    RETURN RP_ORDER_NUM_HIGH;
  END RP_ORDER_NUM_HIGH_P;

  FUNCTION RP_ORDER_NUM_LOW_P RETURN NUMBER IS
  BEGIN
    RETURN RP_ORDER_NUM_LOW;
  END RP_ORDER_NUM_LOW_P;

  FUNCTION RP_WAREHOUSE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_WAREHOUSE;
  END RP_WAREHOUSE_P;

  FUNCTION RP_ITEM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_ITEM;
  END RP_ITEM_P;

  FUNCTION RP_SOURCE_SYSTEM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_SOURCE_SYSTEM;
  END RP_SOURCE_SYSTEM_P;

  PROCEDURE SET_NAME(APPLICATION IN VARCHAR2
                    ,NAME IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.SET_NAME(:APPLICATION, :NAME); end;');
    STPROC.BIND_I(APPLICATION);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE; */NULL;
  END SET_NAME;

  PROCEDURE SET_TOKEN(TOKEN IN VARCHAR2
                     ,VALUE IN VARCHAR2
                     ,TRANSLATE IN BOOLEAN) IS
  BEGIN
    /*STPROC.INIT('declare TRANSLATE BOOLEAN; begin TRANSLATE := sys.diutil.int_to_bool(:TRANSLATE); FND_MESSAGE.SET_TOKEN(:TOKEN, :VALUE, TRANSLATE); end;');
    STPROC.BIND_I(TRANSLATE);
    STPROC.BIND_I(TOKEN);
    STPROC.BIND_I(VALUE);
    STPROC.EXECUTE;*/NULL;
  END SET_TOKEN;

  PROCEDURE RETRIEVE(MSGOUT OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.RETRIEVE(:MSGOUT); end;');
    STPROC.BIND_O(MSGOUT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MSGOUT);*/NULL;
  END RETRIEVE;

  PROCEDURE CLEAR IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.CLEAR; end;');
    STPROC.EXECUTE;*/NULL;
  END CLEAR;

  FUNCTION GET_STRING(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET_STRING(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;*/
    RETURN(NULL);
  END GET_STRING;

  FUNCTION GET_NUMBER(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET_NUMBER(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;*/
    RETURN(NULL);
  END GET_NUMBER;

  FUNCTION GET RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;*/
    RETURN(NULL);
  END GET;

  FUNCTION GET_ENCODED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET_ENCODED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;*/
    RETURN(NULL);
  END GET_ENCODED;

  PROCEDURE PARSE_ENCODED(ENCODED_MESSAGE IN VARCHAR2
                         ,APP_SHORT_NAME OUT NOCOPY VARCHAR2
                         ,MESSAGE_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.PARSE_ENCODED(:ENCODED_MESSAGE, :APP_SHORT_NAME, :MESSAGE_NAME); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.BIND_O(APP_SHORT_NAME);
    STPROC.BIND_O(MESSAGE_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,APP_SHORT_NAME);
    STPROC.RETRIEVE(3
                   ,MESSAGE_NAME);*/
      NULL;
  END PARSE_ENCODED;

  PROCEDURE SET_ENCODED(ENCODED_MESSAGE IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.SET_ENCODED(:ENCODED_MESSAGE); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.EXECUTE;*/NULL;
  END SET_ENCODED;

  PROCEDURE RAISE_ERROR IS
  BEGIN
/*    STPROC.INIT('begin FND_MESSAGE.RAISE_ERROR; end;');
    STPROC.EXECUTE;*/NULL;
  END RAISE_ERROR;

END XXSS_WSH_WSHRDBDR_XMLP_PKG;
/
