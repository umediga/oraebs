DROP PACKAGE BODY APPS.ZX_ZXXINUTR_XMLP_PKG;

CREATE OR REPLACE PACKAGE BODY APPS.ZX_ZXXINUTR_XMLP_PKG AS
/* $Header: ZXXINUTRB.pls 120.1.12010000.1 2008/07/28 13:28:00 appldev ship $ */
  FUNCTION GET_BASE_CURR_DATA RETURN BOOLEAN IS
    BASE_CURR AP_SYSTEM_PARAMETERS.BASE_CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES_VL.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES_VL.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES_VL.DESCRIPTION%TYPE;
  BEGIN
    BASE_CURR := P_CURR_CODE;
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    SELECT
      C.PRECISION,
      C.MINIMUM_ACCOUNTABLE_UNIT,
      C.DESCRIPTION
    INTO PREC,MIN_AU,DESCR
    FROM
      FND_CURRENCIES_VL C
    WHERE CURRENCY_CODE = BASE_CURR;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    C_BASE_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := MIN_AU;
    C_BASE_DESCRIPTION := DESCR;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_BASE_CURR_DATA;

  FUNCTION CUSTOM_INIT RETURN BOOLEAN IS
    L_NLS_REPORT_BASIS FND_LOOKUPS.MEANING%TYPE;
    L_NLS_INV_STATUS FND_LOOKUPS.MEANING%TYPE;
    L_NLS_ORDERBY FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    P_MIN_PRECISION := C_BASE_PRECISION;
    P_TAX_PARAM_DISP := P_TAX_PARAM;
    P_INV_STATUS_D := P_INV_STATUS;
    IF P_TAX_PARAM_DISP IS NULL THEN
      P_TAX_PARAM_DISP := 'All';
      C_NLS_TAX_PARAM := C_NLS_ALL;
    END IF;
    IF P_INV_STATUS_D IS NULL OR P_INV_STATUS_D = 'ALL' THEN
      P_INV_STATUS_D := 'ALL';
    END IF;
    /*SRW.MESSAGE('101'
               ,'Custom Init :' || P_REPORT_BASIS || P_INV_STATUS || P_ORDERBY)*/NULL;
    SELECT
      ALC1.MEANING,
      ALC2.MEANING,
      ALC3.MEANING
    INTO L_NLS_REPORT_BASIS,L_NLS_INV_STATUS,L_NLS_ORDERBY
    FROM
      FND_LOOKUPS ALC1,
      FND_LOOKUPS ALC2,
      FND_LOOKUPS ALC3
    WHERE ALC1.LOOKUP_TYPE = 'ZX_TRL_TAX_USE_DATE_BASIS'
      AND ALC1.LOOKUP_CODE = P_REPORT_BASIS
      AND ALC2.LOOKUP_TYPE = 'ZX_TRL_INVOICE_STATUS'
      AND ALC2.LOOKUP_CODE = P_INV_STATUS_D
      AND ALC3.LOOKUP_TYPE = 'ZX_TRL_VENDOR_OR_INVOICE'
      AND ALC3.LOOKUP_CODE = P_ORDERBY;
    /*SRW.MESSAGE('101'
               ,'After Custom Init SQL Call')*/NULL;
    C_NLS_REPORT_BASIS := L_NLS_REPORT_BASIS;
    C_NLS_INV_STATUS := L_NLS_INV_STATUS;
    C_NLS_ORDERBY := L_NLS_ORDERBY;
    RETURN (TRUE);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      /*SRW.MESSAGE('101'
                 ,'Data Not Found')*/NULL;
    WHEN OTHERS THEN
      RETURN (FALSE);
  END CUSTOM_INIT;

  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_YES FND_LOOKUPS.MEANING%TYPE;
    NLS_NO FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    NLS_ALL := '';
    NLS_YES := '';
    NLS_NO := '';
    SELECT
      LY.MEANING,
      LN.MEANING,
      LA.DISPLAYED_FIELD
    INTO NLS_YES,NLS_NO,NLS_ALL
    FROM
      FND_LOOKUPS LY,
      FND_LOOKUPS LN,
      AP_LOOKUP_CODES LA
    WHERE LY.LOOKUP_TYPE = 'YES_NO'
      AND LY.LOOKUP_CODE = 'Y'
      AND LN.LOOKUP_TYPE = 'YES_NO'
      AND LN.LOOKUP_CODE = 'N'
      AND LA.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND LA.LOOKUP_CODE = 'ALL';
    C_NLS_YES := NLS_YES;
    C_NLS_NO := NLS_NO;
    C_NLS_ALL := NLS_ALL;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_APPRVL_NO_DATA');
    C_NLS_NO_DATA_EXISTS := FND_MESSAGE.GET;
   -- C_NLS_NO_DATA_EXISTS := '*** ' || C_NLS_NO_DATA_EXISTS || ' ***';
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_ALL_END_OF_REPORT');
    C_NLS_END_OF_REPORT := FND_MESSAGE.GET;
   -- C_NLS_END_OF_REPORT := '*** ' || C_NLS_END_OF_REPORT || ' ***';
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;

      P_START_DATE_D := to_char(P_START_DATE,'DD-MON-YYYY');
      P_END_DATE_D := to_char(P_END_DATE,'DD-MON-YYYY');

      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('1'
                   ,'After SRWINIT')*/NULL;
      END IF;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('2'
                   ,'After Get_Company_Name')*/NULL;
      END IF;
      IF (GET_NLS_STRINGS <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('3'
                   ,'After Get_NLS_Strings')*/NULL;
      END IF;
      IF (GET_BASE_CURR_DATA <> TRUE) THEN
        /*SRW.MESSAGE('1000'
                   ,'Base failed')*/NULL;
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('4'
                   ,'After Get_Base_Curr_Data')*/NULL;
      END IF;
      P_SUMMARY_FLAG_D:=P_SUMMARY_FLAG;

      IF P_ORDERBY <> 'VENDOR' THEN
        /*SRW.MESSAGE('101'
                   ,'Summary flag ')*/NULL;
        P_SUMMARY_FLAG_D := 'N';
      END IF;
      IF (CUSTOM_INIT <> TRUE) THEN
        /*SRW.MESSAGE('101'
                   ,'Custom init fail')*/NULL;
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('7'
                   ,'After Custom_Init')*/NULL;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.BREAK*/NULL;
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE('120'
                   ,'In others')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('20'
                   ,'After SRWEXIT')*/NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_CHART_OF_ACCOUNTS_ID GL_SETS_OF_BOOKS.CHART_OF_ACCOUNTS_ID%TYPE;
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
    L_SOB_ID NUMBER;
    L_REPORT_START_DATE DATE;
  BEGIN
    L_REPORT_START_DATE := SYSDATE;
    L_SOB_ID := P_SET_OF_BOOKS_ID;
    SELECT
      NAME,
      CHART_OF_ACCOUNTS_ID
    INTO L_NAME,L_CHART_OF_ACCOUNTS_ID
    FROM
      GL_SETS_OF_BOOKS
    WHERE SET_OF_BOOKS_ID = L_SOB_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    C_CHART_OF_ACCOUNTS_ID := L_CHART_OF_ACCOUNTS_ID;
    C_REPORT_START_DATE := L_REPORT_START_DATE;
    /*SRW.MESSAGE(113
               ,C_COMPANY_NAME_HEADER)*/NULL;
    /*SRW.MESSAGE(114
               ,C_CHART_OF_ACCOUNTS_ID)*/NULL;
    /*SRW.MESSAGE(115
               ,C_REPORT_START_DATE)*/NULL;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION CALCULATE_RUN_TIME RETURN BOOLEAN IS
    END_DATE DATE;
    START_DATE DATE;
  BEGIN
    END_DATE := SYSDATE;
    START_DATE := C_REPORT_START_DATE;
    C_REPORT_RUN_TIME := TO_CHAR(TO_DATE('01/01/0001'
                                        ,'DD/MM/YYYY') + ((END_DATE - START_DATE))
                                ,'HH24:MI:SS');
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END CALCULATE_RUN_TIME;

  FUNCTION ITEM_AMOUNT(C_INVOICE_ID IN NUMBER
                      ,C_TAX_NAME IN VARCHAR2
                      ,C_INVOICE_TAX_ID IN NUMBER) RETURN NUMBER IS
    L_ITEM_AMOUNT NUMBER;
  BEGIN
    /*SRW.REFERENCE(C_INVOICE_ID)*/NULL;
    /*SRW.REFERENCE(C_TAX_NAME)*/NULL;
    SELECT
      SUM(AMOUNT)
    INTO L_ITEM_AMOUNT
    FROM
      AP_INVOICE_DISTRIBUTIONS_ALL D
    WHERE D.INVOICE_ID = C_INVOICE_ID
      AND D.LINE_TYPE_LOOKUP_CODE not in ( 'NONREC_TAX' , 'REC_TAX' , 'TERV' , 'TIPV' , 'AWT' )
      AND D.TAX_CODE_ID = C_INVOICE_TAX_ID
      AND ( P_REPORT_BASIS <> 'GL'
    OR D.ACCOUNTING_DATE between P_START_DATE
      AND P_END_DATE )
      AND NVL(D.ORG_ID
       ,-99) in (
      SELECT
        - 99
      FROM
        DUAL
      UNION ALL
      SELECT
        ORGANIZATION_ID
      FROM
        HR_ORGANIZATION_INFORMATION,
        FND_PRODUCT_GROUPS
      WHERE NVL(MULTI_ORG_FLAG
         ,'N') = 'Y'
        AND ORG_INFORMATION_CONTEXT = 'Operating Unit Information'
        AND DECODE(P_REPORTING_LEVEL
            ,'1000'
            ,TO_NUMBER(ORG_INFORMATION3)
            ,'2000'
            ,TO_NUMBER(ORG_INFORMATION2)
            ,'3000'
            ,ORGANIZATION_ID) = P_REPORTING_ENTITY_ID );
    RETURN (L_ITEM_AMOUNT);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (0);
  END ITEM_AMOUNT;

  FUNCTION TAX_AMOUNT(C_TAXABLE_AMOUNT IN NUMBER
                     ,C_TAX_RATE IN NUMBER) RETURN NUMBER IS
    L_TAX_AMOUNT NUMBER;
  BEGIN
    /*SRW.REFERENCE(C_TAXABLE_AMOUNT)*/NULL;
    /*SRW.REFERENCE(C_TAX_RATE)*/NULL;
    SELECT
      DECODE(C_BASE_MIN_ACCT_UNIT
            ,''
            ,ROUND(C_TAXABLE_AMOUNT * (C_TAX_RATE / 100)
                 ,C_BASE_PRECISION)
            ,ROUND(C_TAXABLE_AMOUNT * (C_TAX_RATE / 100) / C_BASE_MIN_ACCT_UNIT) * C_BASE_MIN_ACCT_UNIT)
    INTO L_TAX_AMOUNT
    FROM
      SYS.DUAL;
    RETURN (L_TAX_AMOUNT);
  END TAX_AMOUNT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    FND_MO_REPORTING_API.INITIALIZE(P_REPORTING_LEVEL
                                   ,P_REPORTING_ENTITY_ID
                                   ,'AUTO');
    /*SRW.MESSAGE(104
               ,'After Init')*/NULL;
    P_ORG_WHERE_V := FND_MO_REPORTING_API.GET_PREDICATE('v'
                                                       ,NULL);
    /*SRW.MESSAGE(105
               ,'After p_org_v')*/NULL;
    P_ORG_WHERE_VS := FND_MO_REPORTING_API.GET_PREDICATE('vs'
                                                        ,NULL);
    /*SRW.MESSAGE(106
               ,'After p_org_vs')*/NULL;
    P_ORG_WHERE_I := FND_MO_REPORTING_API.GET_PREDICATE('i'
                                                       ,NULL);
    /*SRW.MESSAGE(107
               ,'After i')*/NULL;
    P_ORG_WHERE_D := FND_MO_REPORTING_API.GET_PREDICATE('d'
                                                       ,NULL);
    /*SRW.MESSAGE(108
               ,'After d')*/NULL;
    P_ORG_WHERE_B := FND_MO_REPORTING_API.GET_PREDICATE('b'
                                                       ,NULL);
    /*SRW.MESSAGE(109
               ,'After b')*/NULL;
    P_ORG_WHERE_T := FND_MO_REPORTING_API.GET_PREDICATE('t'
                                                       ,NULL);
    /*SRW.MESSAGE(110
               ,'After t')*/NULL;
    P_ORG_WHERE_H := XLA_MO_REPORTING_API.GET_PREDICATE('h'
                                                       ,NULL);
    /*SRW.MESSAGE(111
               ,'After h')*/NULL;
    P_ORG_WHERE_D2 := FND_MO_REPORTING_API.GET_PREDICATE('d2'
                                                        ,NULL);
    /*SRW.MESSAGE(112
               ,'After d2')*/NULL;
    P_LEVEL_NAME := FND_MO_REPORTING_API.GET_REPORTING_LEVEL_NAME;
    /*SRW.MESSAGE(113
               ,'After level')*/NULL;
    P_ENTITY_NAME := FND_MO_REPORTING_API.GET_REPORTING_ENTITY_NAME;
    /*SRW.MESSAGE(114
               ,'After name')*/NULL;
    if p_org_where_h is  null then
     p_org_where_h := ' ';
    end if;

    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION C_OLD_VENDOR_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_OLD_VENDOR_ID;
  END C_OLD_VENDOR_ID_P;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;

  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;

  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;

  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;

  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;

  FUNCTION C_REPORT_RUN_TIME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_RUN_TIME;
  END C_REPORT_RUN_TIME_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION C_NLS_REPORT_BASIS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_REPORT_BASIS;
  END C_NLS_REPORT_BASIS_P;

  FUNCTION C_NLS_INV_STATUS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_INV_STATUS;
  END C_NLS_INV_STATUS_P;

  FUNCTION C_NLS_ORDERBY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ORDERBY;
  END C_NLS_ORDERBY_P;

  FUNCTION C_NLS_TAX_PARAM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_TAX_PARAM;
  END C_NLS_TAX_PARAM_P;

  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;

END ZX_ZXXINUTR_XMLP_PKG;


/


GRANT EXECUTE ON APPS.ZX_ZXXINUTR_XMLP_PKG TO INTG_NONHR_NONXX_RO;
